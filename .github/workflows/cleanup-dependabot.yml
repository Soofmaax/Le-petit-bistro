name: Cleanup Dependabot PRs

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Close and delete branches for Dependabot/dep PRs
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Get all open PRs (paginate)
            const prs = await github.paginate(github.rest.pulls.list, {
              owner,
              repo,
              state: 'open',
              per_page: 100,
            });

            let closed = 0;
            for (const pr of prs) {
              const isDependabot = pr.user && pr.user.login === 'dependabot[bot]';
              const hasDependenciesLabel = (pr.labels || []).some(l => (l.name || '').toLowerCase() === 'dependencies');
              const looksLikeDeps = /^deps\(/i.test(pr.title || '');

              if (isDependabot || hasDependenciesLabel || looksLikeDeps) {
                core.info(`Closing PR #${pr.number}: ${pr.title}`);
                try {
                  await github.rest.pulls.update({
                    owner,
                    repo,
                    pull_number: pr.number,
                    state: 'closed',
                  });
                  closed++;
                } catch (e) {
                  core.warning(`Failed to close PR #${pr.number}: ${e.message}`);
                }

                // Attempt to delete the head branch if it is on the same repo (not a fork)
                const headRef = pr.head && pr.head.ref;
                const headRepoFull = pr.head && pr.head.repo && pr.head.repo.full_name;
                const sameRepo = headRepoFull && headRepoFull.toLowerCase() === `${owner}/${repo}`.toLowerCase();

                if (headRef && sameRepo) {
                  const ref = `heads/${headRef}`;
                  core.info(`Deleting branch ${ref}`);
                  try {
                    await github.rest.git.deleteRef({ owner, repo, ref });
                  } catch (e) {
                    core.warning(`Failed to delete ref ${ref}: ${e.message}`);
                  }
                } else {
                  core.info(`Skipping branch deletion for #${pr.number} (fork or unknown)`);
                }
              }
            }
            core.info(`Closed ${closed} PR(s).`)